// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages-sdcereum.proto

package trezor

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// *
// Request: Ask device for public key corresponding to address_n path
// @start
// @next sdcereumPublicKey
// @next Failure
type sdcereumGetPublicKey struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay          *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *sdcereumGetPublicKey) Reset()         { *m = sdcereumGetPublicKey{} }
func (m *sdcereumGetPublicKey) String() string { return proto.CompactTextString(m) }
func (*sdcereumGetPublicKey) ProtoMessage()    {}
func (*sdcereumGetPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{0}
}

func (m *sdcereumGetPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_sdcereumGetPublicKey.Unmarshal(m, b)
}
func (m *sdcereumGetPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_sdcereumGetPublicKey.Marshal(b, m, deterministic)
}
func (m *sdcereumGetPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_sdcereumGetPublicKey.Merge(m, src)
}
func (m *sdcereumGetPublicKey) XXX_Size() int {
	return xxx_messageInfo_sdcereumGetPublicKey.Size(m)
}
func (m *sdcereumGetPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_sdcereumGetPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_sdcereumGetPublicKey proto.InternalMessageInfo

func (m *sdcereumGetPublicKey) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *sdcereumGetPublicKey) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

// *
// Response: Contains public key derived from device private seed
// @end
type sdcereumPublicKey struct {
	Node                 *HDNodeType `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Xpub                 *string     `protobuf:"bytes,2,opt,name=xpub" json:"xpub,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *sdcereumPublicKey) Reset()         { *m = sdcereumPublicKey{} }
func (m *sdcereumPublicKey) String() string { return proto.CompactTextString(m) }
func (*sdcereumPublicKey) ProtoMessage()    {}
func (*sdcereumPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{1}
}

func (m *sdcereumPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_sdcereumPublicKey.Unmarshal(m, b)
}
func (m *sdcereumPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_sdcereumPublicKey.Marshal(b, m, deterministic)
}
func (m *sdcereumPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_sdcereumPublicKey.Merge(m, src)
}
func (m *sdcereumPublicKey) XXX_Size() int {
	return xxx_messageInfo_sdcereumPublicKey.Size(m)
}
func (m *sdcereumPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_sdcereumPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_sdcereumPublicKey proto.InternalMessageInfo

func (m *sdcereumPublicKey) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *sdcereumPublicKey) GetXpub() string {
	if m != nil && m.Xpub != nil {
		return *m.Xpub
	}
	return ""
}

// *
// Request: Ask device for sdcereum address corresponding to address_n path
// @start
// @next sdcereumAddress
// @next Failure
type sdcereumGetAddress struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay          *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *sdcereumGetAddress) Reset()         { *m = sdcereumGetAddress{} }
func (m *sdcereumGetAddress) String() string { return proto.CompactTextString(m) }
func (*sdcereumGetAddress) ProtoMessage()    {}
func (*sdcereumGetAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{2}
}

func (m *sdcereumGetAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_sdcereumGetAddress.Unmarshal(m, b)
}
func (m *sdcereumGetAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_sdcereumGetAddress.Marshal(b, m, deterministic)
}
func (m *sdcereumGetAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_sdcereumGetAddress.Merge(m, src)
}
func (m *sdcereumGetAddress) XXX_Size() int {
	return xxx_messageInfo_sdcereumGetAddress.Size(m)
}
func (m *sdcereumGetAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_sdcereumGetAddress.DiscardUnknown(m)
}

var xxx_messageInfo_sdcereumGetAddress proto.InternalMessageInfo

func (m *sdcereumGetAddress) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *sdcereumGetAddress) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

// *
// Response: Contains an sdcereum address derived from device private seed
// @end
type sdcereumAddress struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	AddressHex           *string  `protobuf:"bytes,2,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *sdcereumAddress) Reset()         { *m = sdcereumAddress{} }
func (m *sdcereumAddress) String() string { return proto.CompactTextString(m) }
func (*sdcereumAddress) ProtoMessage()    {}
func (*sdcereumAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{3}
}

func (m *sdcereumAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_sdcereumAddress.Unmarshal(m, b)
}
func (m *sdcereumAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_sdcereumAddress.Marshal(b, m, deterministic)
}
func (m *sdcereumAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_sdcereumAddress.Merge(m, src)
}
func (m *sdcereumAddress) XXX_Size() int {
	return xxx_messageInfo_sdcereumAddress.Size(m)
}
func (m *sdcereumAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_sdcereumAddress.DiscardUnknown(m)
}

var xxx_messageInfo_sdcereumAddress proto.InternalMessageInfo

func (m *sdcereumAddress) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *sdcereumAddress) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

// *
// Request: Ask device to sign transaction
// All fields are optional from the protocol's point of view. Each field defaults to value `0` if missing.
// Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
// @start
// @next sdcereumTxRequest
// @next Failure
type sdcereumSignTx struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Nonce                []byte   `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`
	GasLimit             []byte   `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	ToBin                []byte   `protobuf:"bytes,5,opt,name=toBin" json:"toBin,omitempty"`
	ToHex                *string  `protobuf:"bytes,11,opt,name=toHex" json:"toHex,omitempty"`
	Value                []byte   `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	DataInitialChunk     []byte   `protobuf:"bytes,7,opt,name=data_initial_chunk,json=dataInitialChunk" json:"data_initial_chunk,omitempty"`
	DataLength           *uint32  `protobuf:"varint,8,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	ChainId              *uint32  `protobuf:"varint,9,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	TxType               *uint32  `protobuf:"varint,10,opt,name=tx_type,json=txType" json:"tx_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *sdcereumSignTx) Reset()         { *m = sdcereumSignTx{} }
func (m *sdcereumSignTx) String() string { return proto.CompactTextString(m) }
func (*sdcereumSignTx) ProtoMessage()    {}
func (*sdcereumSignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{4}
}

func (m *sdcereumSignTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_sdcereumSignTx.Unmarshal(m, b)
}
func (m *sdcereumSignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_sdcereumSignTx.Marshal(b, m, deterministic)
}
func (m *sdcereumSignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_sdcereumSignTx.Merge(m, src)
}
func (m *sdcereumSignTx) XXX_Size() int {
	return xxx_messageInfo_sdcereumSignTx.Size(m)
}
func (m *sdcereumSignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_sdcereumSignTx.DiscardUnknown(m)
}

var xxx_messageInfo_sdcereumSignTx proto.InternalMessageInfo

func (m *sdcereumSignTx) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *sdcereumSignTx) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *sdcereumSignTx) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *sdcereumSignTx) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *sdcereumSignTx) GetToBin() []byte {
	if m != nil {
		return m.ToBin
	}
	return nil
}

func (m *sdcereumSignTx) GetToHex() string {
	if m != nil && m.ToHex != nil {
		return *m.ToHex
	}
	return ""
}

func (m *sdcereumSignTx) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *sdcereumSignTx) GetDataInitialChunk() []byte {
	if m != nil {
		return m.DataInitialChunk
	}
	return nil
}

func (m *sdcereumSignTx) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *sdcereumSignTx) GetChainId() uint32 {
	if m != nil && m.ChainId != nil {
		return *m.ChainId
	}
	return 0
}

func (m *sdcereumSignTx) GetTxType() uint32 {
	if m != nil && m.TxType != nil {
		return *m.TxType
	}
	return 0
}

// *
// Response: Device asks for more data from transaction payload, or returns the signature.
// If data_length is set, device awaits that many more bytes of payload.
// Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
// @end
// @next sdcereumTxAck
type sdcereumTxRequest struct {
	DataLength           *uint32  `protobuf:"varint,1,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	SignatureV           *uint32  `protobuf:"varint,2,opt,name=signature_v,json=signatureV" json:"signature_v,omitempty"`
	SignatureR           []byte   `protobuf:"bytes,3,opt,name=signature_r,json=signatureR" json:"signature_r,omitempty"`
	SignatureS           []byte   `protobuf:"bytes,4,opt,name=signature_s,json=signatureS" json:"signature_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *sdcereumTxRequest) Reset()         { *m = sdcereumTxRequest{} }
func (m *sdcereumTxRequest) String() string { return proto.CompactTextString(m) }
func (*sdcereumTxRequest) ProtoMessage()    {}
func (*sdcereumTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{5}
}

func (m *sdcereumTxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_sdcereumTxRequest.Unmarshal(m, b)
}
func (m *sdcereumTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_sdcereumTxRequest.Marshal(b, m, deterministic)
}
func (m *sdcereumTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_sdcereumTxRequest.Merge(m, src)
}
func (m *sdcereumTxRequest) XXX_Size() int {
	return xxx_messageInfo_sdcereumTxRequest.Size(m)
}
func (m *sdcereumTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_sdcereumTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_sdcereumTxRequest proto.InternalMessageInfo

func (m *sdcereumTxRequest) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *sdcereumTxRequest) GetSignatureV() uint32 {
	if m != nil && m.SignatureV != nil {
		return *m.SignatureV
	}
	return 0
}

func (m *sdcereumTxRequest) GetSignatureR() []byte {
	if m != nil {
		return m.SignatureR
	}
	return nil
}

func (m *sdcereumTxRequest) GetSignatureS() []byte {
	if m != nil {
		return m.SignatureS
	}
	return nil
}

// *
// Request: Transaction payload data.
// @next sdcereumTxRequest
type sdcereumTxAck struct {
	DataChunk            []byte   `protobuf:"bytes,1,opt,name=data_chunk,json=dataChunk" json:"data_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *sdcereumTxAck) Reset()         { *m = sdcereumTxAck{} }
func (m *sdcereumTxAck) String() string { return proto.CompactTextString(m) }
func (*sdcereumTxAck) ProtoMessage()    {}
func (*sdcereumTxAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{6}
}

func (m *sdcereumTxAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_sdcereumTxAck.Unmarshal(m, b)
}
func (m *sdcereumTxAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_sdcereumTxAck.Marshal(b, m, deterministic)
}
func (m *sdcereumTxAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_sdcereumTxAck.Merge(m, src)
}
func (m *sdcereumTxAck) XXX_Size() int {
	return xxx_messageInfo_sdcereumTxAck.Size(m)
}
func (m *sdcereumTxAck) XXX_DiscardUnknown() {
	xxx_messageInfo_sdcereumTxAck.DiscardUnknown(m)
}

var xxx_messageInfo_sdcereumTxAck proto.InternalMessageInfo

func (m *sdcereumTxAck) GetDataChunk() []byte {
	if m != nil {
		return m.DataChunk
	}
	return nil
}

// *
// Request: Ask device to sign message
// @start
// @next sdcereumMessageSignature
// @next Failure
type sdcereumSignMessage struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *sdcereumSignMessage) Reset()         { *m = sdcereumSignMessage{} }
func (m *sdcereumSignMessage) String() string { return proto.CompactTextString(m) }
func (*sdcereumSignMessage) ProtoMessage()    {}
func (*sdcereumSignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{7}
}

func (m *sdcereumSignMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_sdcereumSignMessage.Unmarshal(m, b)
}
func (m *sdcereumSignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_sdcereumSignMessage.Marshal(b, m, deterministic)
}
func (m *sdcereumSignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_sdcereumSignMessage.Merge(m, src)
}
func (m *sdcereumSignMessage) XXX_Size() int {
	return xxx_messageInfo_sdcereumSignMessage.Size(m)
}
func (m *sdcereumSignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_sdcereumSignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_sdcereumSignMessage proto.InternalMessageInfo

func (m *sdcereumSignMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *sdcereumSignMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// *
// Response: Signed message
// @end
type sdcereumMessageSignature struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	AddressHex           *string  `protobuf:"bytes,3,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *sdcereumMessageSignature) Reset()         { *m = sdcereumMessageSignature{} }
func (m *sdcereumMessageSignature) String() string { return proto.CompactTextString(m) }
func (*sdcereumMessageSignature) ProtoMessage()    {}
func (*sdcereumMessageSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{8}
}

func (m *sdcereumMessageSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_sdcereumMessageSignature.Unmarshal(m, b)
}
func (m *sdcereumMessageSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_sdcereumMessageSignature.Marshal(b, m, deterministic)
}
func (m *sdcereumMessageSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_sdcereumMessageSignature.Merge(m, src)
}
func (m *sdcereumMessageSignature) XXX_Size() int {
	return xxx_messageInfo_sdcereumMessageSignature.Size(m)
}
func (m *sdcereumMessageSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_sdcereumMessageSignature.DiscardUnknown(m)
}

var xxx_messageInfo_sdcereumMessageSignature proto.InternalMessageInfo

func (m *sdcereumMessageSignature) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *sdcereumMessageSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *sdcereumMessageSignature) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

// *
// Request: Ask device to verify message
// @start
// @next Success
// @next Failure
type sdcereumVerifyMessage struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Message              []byte   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	AddressHex           *string  `protobuf:"bytes,4,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *sdcereumVerifyMessage) Reset()         { *m = sdcereumVerifyMessage{} }
func (m *sdcereumVerifyMessage) String() string { return proto.CompactTextString(m) }
func (*sdcereumVerifyMessage) ProtoMessage()    {}
func (*sdcereumVerifyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{9}
}

func (m *sdcereumVerifyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_sdcereumVerifyMessage.Unmarshal(m, b)
}
func (m *sdcereumVerifyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_sdcereumVerifyMessage.Marshal(b, m, deterministic)
}
func (m *sdcereumVerifyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_sdcereumVerifyMessage.Merge(m, src)
}
func (m *sdcereumVerifyMessage) XXX_Size() int {
	return xxx_messageInfo_sdcereumVerifyMessage.Size(m)
}
func (m *sdcereumVerifyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_sdcereumVerifyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_sdcereumVerifyMessage proto.InternalMessageInfo

func (m *sdcereumVerifyMessage) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *sdcereumVerifyMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *sdcereumVerifyMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *sdcereumVerifyMessage) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

func init() {
	proto.RegisterType((*sdcereumGetPublicKey)(nil), "hw.trezor.messages.sdcereum.sdcereumGetPublicKey")
	proto.RegisterType((*sdcereumPublicKey)(nil), "hw.trezor.messages.sdcereum.sdcereumPublicKey")
	proto.RegisterType((*sdcereumGetAddress)(nil), "hw.trezor.messages.sdcereum.sdcereumGetAddress")
	proto.RegisterType((*sdcereumAddress)(nil), "hw.trezor.messages.sdcereum.sdcereumAddress")
	proto.RegisterType((*sdcereumSignTx)(nil), "hw.trezor.messages.sdcereum.sdcereumSignTx")
	proto.RegisterType((*sdcereumTxRequest)(nil), "hw.trezor.messages.sdcereum.sdcereumTxRequest")
	proto.RegisterType((*sdcereumTxAck)(nil), "hw.trezor.messages.sdcereum.sdcereumTxAck")
	proto.RegisterType((*sdcereumSignMessage)(nil), "hw.trezor.messages.sdcereum.sdcereumSignMessage")
	proto.RegisterType((*sdcereumMessageSignature)(nil), "hw.trezor.messages.sdcereum.sdcereumMessageSignature")
	proto.RegisterType((*sdcereumVerifyMessage)(nil), "hw.trezor.messages.sdcereum.sdcereumVerifyMessage")
}

func init() { proto.RegisterFile("messages-sdcereum.proto", fileDescriptor_cb33f46ba915f15c) }

var fileDescriptor_cb33f46ba915f15c = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x9b, 0xb4, 0x49, 0x26, 0x0d, 0x1f, 0xa6, 0x55, 0x17, 0x0a, 0x34, 0x18, 0x21, 0xe5,
	0x00, 0x3e, 0x70, 0x43, 0xe2, 0xd2, 0x52, 0x44, 0x2b, 0x4a, 0x55, 0xdc, 0xa8, 0x57, 0x6b, 0x63,
	0x6f, 0xe3, 0x55, 0x9d, 0xdd, 0xe0, 0x5d, 0xb7, 0x0e, 0x7f, 0x82, 0x23, 0xff, 0x87, 0x5f, 0x86,
	0xf6, 0x2b, 0x71, 0x52, 0x54, 0x0e, 0xbd, 0x65, 0xde, 0xbc, 0x7d, 0xf3, 0x66, 0xf4, 0x62, 0xd8,
	0x99, 0x10, 0x21, 0xf0, 0x98, 0x88, 0x77, 0x44, 0x66, 0xa4, 0x20, 0xe5, 0x24, 0x9c, 0x16, 0x5c,
	0x72, 0x7f, 0x37, 0xbb, 0x09, 0x65, 0x41, 0x7e, 0xf2, 0x22, 0x74, 0x94, 0xd0, 0x51, 0x9e, 0x6d,
	0xcf, 0x5f, 0x25, 0x7c, 0x32, 0xe1, 0xcc, 0xbc, 0x09, 0x2e, 0x60, 0xeb, 0xb3, 0xa5, 0x7c, 0x21,
	0xf2, 0xac, 0x1c, 0xe5, 0x34, 0xf9, 0x4a, 0x66, 0xfe, 0x2e, 0x74, 0x70, 0x9a, 0x16, 0x44, 0x88,
	0x98, 0x21, 0xaf, 0xdf, 0x18, 0xf4, 0xa2, 0xb6, 0x05, 0x4e, 0xfd, 0x57, 0xb0, 0x29, 0x32, 0x7e,
	0x13, 0xa7, 0x54, 0x4c, 0x73, 0x3c, 0x43, 0x6b, 0x7d, 0x6f, 0xd0, 0x8e, 0xba, 0x0a, 0x3b, 0x34,
	0x50, 0x30, 0x82, 0xc7, 0x4e, 0x77, 0x21, 0xfa, 0x01, 0x9a, 0x8c, 0xa7, 0x04, 0x79, 0x7d, 0x6f,
	0xd0, 0x7d, 0xff, 0x26, 0xfc, 0x87, 0x5f, 0x6b, 0xee, 0xe8, 0xf0, 0x94, 0xa7, 0x64, 0x38, 0x9b,
	0x92, 0x48, 0x3f, 0xf1, 0x7d, 0x68, 0x56, 0xd3, 0x72, 0xa4, 0x47, 0x75, 0x22, 0xfd, 0x3b, 0x18,
	0x82, 0x5f, 0xf3, 0xbe, 0x6f, 0xdc, 0xdd, 0xdb, 0xf9, 0x77, 0x78, 0xe8, 0x54, 0x9d, 0xe4, 0x4b,
	0x00, 0xab, 0x70, 0x40, 0x99, 0x76, 0xbf, 0x19, 0xd5, 0x90, 0x5a, 0xff, 0x88, 0x54, 0xd6, 0x62,
	0x0d, 0x09, 0xfe, 0xac, 0xc1, 0x03, 0xa7, 0x79, 0x4e, 0xc7, 0x6c, 0x58, 0xdd, 0xed, 0x72, 0x0b,
	0xd6, 0x19, 0x67, 0x09, 0xd1, 0x52, 0x9b, 0x91, 0x29, 0xd4, 0x93, 0x31, 0x16, 0xf1, 0xb4, 0xa0,
	0x09, 0x41, 0x0d, 0xdd, 0x69, 0x8f, 0xb1, 0x38, 0x53, 0xb5, 0x6b, 0xe6, 0x74, 0x42, 0x25, 0x6a,
	0xce, 0x9b, 0x27, 0xaa, 0x56, 0x7a, 0x92, 0x2b, 0xeb, 0xeb, 0x46, 0x4f, 0x17, 0x06, 0x55, 0x86,
	0xbb, 0xda, 0xb0, 0x29, 0x14, 0x7a, 0x8d, 0xf3, 0x92, 0xa0, 0x0d, 0xc3, 0xd5, 0x85, 0xff, 0x16,
	0xfc, 0x14, 0x4b, 0x1c, 0x53, 0x46, 0x25, 0xc5, 0x79, 0x9c, 0x64, 0x25, 0xbb, 0x42, 0x2d, 0x4d,
	0x79, 0xa4, 0x3a, 0xc7, 0xa6, 0xf1, 0x49, 0xe1, 0xfe, 0x1e, 0x74, 0x35, 0x3b, 0x27, 0x6c, 0x2c,
	0x33, 0xd4, 0xee, 0x7b, 0x83, 0x5e, 0x04, 0x0a, 0x3a, 0xd1, 0x88, 0xff, 0x14, 0xda, 0x49, 0x86,
	0x29, 0x8b, 0x69, 0x8a, 0x3a, 0xba, 0xdb, 0xd2, 0xf5, 0x71, 0xea, 0xef, 0x40, 0x4b, 0x56, 0xb1,
	0x9c, 0x4d, 0x09, 0x02, 0xdd, 0xd9, 0x90, 0x95, 0xca, 0x41, 0xf0, 0xdb, 0x5b, 0x44, 0x6a, 0x58,
	0x45, 0xe4, 0x47, 0x49, 0x84, 0x5c, 0x1d, 0xe5, 0xdd, 0x1a, 0xb5, 0x07, 0x5d, 0x41, 0xc7, 0x0c,
	0xcb, 0xb2, 0x20, 0xf1, 0xb5, 0xbe, 0x68, 0x2f, 0x82, 0x39, 0x74, 0xb1, 0x4c, 0x28, 0xec, 0x61,
	0x17, 0x84, 0x68, 0x99, 0x20, 0xec, 0x71, 0x17, 0x84, 0xf3, 0x20, 0x84, 0xde, 0xc2, 0xd8, 0x7e,
	0x72, 0xe5, 0xbf, 0x00, 0xed, 0xc0, 0x5e, 0xc9, 0xe4, 0xa5, 0xa3, 0x10, 0x7d, 0x9e, 0xe0, 0x04,
	0x9e, 0xd4, 0xd3, 0xf0, 0xcd, 0x64, 0xff, 0xee, 0x48, 0x20, 0x68, 0xd9, 0xff, 0x88, 0x0d, 0x85,
	0x2b, 0x83, 0x0a, 0x90, 0x53, 0xb3, 0x4a, 0xe7, 0xce, 0xda, 0x7f, 0x83, 0xfb, 0x1c, 0x3a, 0xf3,
	0x3d, 0xac, 0xee, 0x02, 0x58, 0x89, 0x75, 0xe3, 0x56, 0xac, 0x7f, 0x79, 0xb0, 0xed, 0x46, 0x5f,
	0x90, 0x82, 0x5e, 0xce, 0xdc, 0x2a, 0xf7, 0x9b, 0x5b, 0xdb, 0xb5, 0xb1, 0xb4, 0xeb, 0x8a, 0xa3,
	0xe6, 0xaa, 0xa3, 0x83, 0x8f, 0xf0, 0x3a, 0xe1, 0x93, 0x50, 0x60, 0xc9, 0x45, 0x46, 0x73, 0x3c,
	0x12, 0xee, 0x03, 0x93, 0xd3, 0x91, 0xf9, 0xe2, 0x8d, 0xca, 0xcb, 0x83, 0xed, 0xa1, 0x06, 0xad,
	0x5b, 0xb7, 0xc2, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xce, 0x81, 0xc8, 0x59, 0x05, 0x00,
	0x00,
}
